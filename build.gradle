plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.2'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.wispforest.io/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.cafeteria.dev" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://api.modrinth.com/maven/" }
    maven { url = "https://maven.nucleoid.xyz/" }

    flatDir {
        dir('libs')
    }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Alloy Forgery
    modImplementation("maven.modrinth:alloy-forgery:${project.alloyforgery_version}")

    // OwO
    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"

    // REI + Arch
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modCompileOnly "dev.architectury:architectury-fabric:${project.architectury_version}"

    // ModMenu
    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

    // Additional Entity Attributes
    modImplementation include("de.dafuqs:AdditionalEntityAttributes:${project.aea_versionite}")
    //modImplementation include("com.github.DaFuqs:AdditionalEntityAttributes:${project.aea_versionite}")

    // Origins compat via Apoli
    // Excludes Daf's libraries from it, as its out of date and produces duplicate transitive dependencies
    modCompileOnly("com.github.apace100:apoli:${project.apoli_version}") {
        exclude(group: "com.github.DaFuqs")
    }

    // Reach Entity Attributes
    //modImplementation include("com.jamieswhiteshirt:reach-entity-attributes:${project.rea_version}")

    // Common Protection API
    modImplementation include("eu.pb4:common-protection-api:${project.cpa_version}")

    // Mixin Extras
    // Using MavenLocal since the file refuses to build with the betas via Jitpack
    annotationProcessor modImplementation("com.llamalad7:MixinExtras:${project.me_version}")
    include "com.llamalad7:MixinExtras:${project.me_version}"

    // MM Decorations
    //modRuntimeOnly("nourl:MythicMetalsDecorations:${project.mmdecorations_version}")

    // Cardinal Components
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")

}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/mythicmetals.accessWidener")
    runs {
        datagen {
            server()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    withSourcesJar()
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}
